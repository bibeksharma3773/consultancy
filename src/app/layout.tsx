import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      {/*
        The 'suppressHydrationWarning' prop is added to the <body> tag.
        This is a common solution for Next.js hydration errors that can occur
        when using third-party libraries or browser extensions that modify the DOM.
        It tells React to ignore mismatches in attributes and content for this element
        during the initial client render, preventing the "Hydration failed" error
        you were seeing. While it's a good fix for this specific issue, it's
        also good practice to ensure no client-side-only code (like window access)
        runs during server-side rendering.
      */}
      <body className={inter.className} suppressHydrationWarning={true}>
        {children}
      </body>
    </html>
  );
}
